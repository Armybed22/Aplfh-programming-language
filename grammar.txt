expr        : KEYWORD: v IDENTIFIER EQ EXPR
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*
            
arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : atom (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def
list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE
if-expr     : KEYWORD:if expr KEYWORD KEYWORD:t expr
              (KEYWORD:elif expr KEYWORD:THEN expr)*
              (KEYWORD:else expr)?


for-expr    : KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr
              (KEYWORD:step expr)? KEYWORD:t expr


while-expr  : KEYWORD:while expr KEYWORD:t expr

func-def    : KEYWORD:f IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFER)*)? RPAREN
              DO expr
