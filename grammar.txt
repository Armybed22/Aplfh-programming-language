statements  : NEWLINE* expr (NEWLΙΝΕ+ statements)* NEWLINE*
statement   : KEYWorD:return expr?
            : KEYWorD:continue
            : KEYWorD:break
            : expr
expr        : KEYWorD: v IDENTIFIER EQ EXPR
            : comp-expr ((KEYWorD:and|KEYWorD:or) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*
            
arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : atom (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def
list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE
if-expr     : KEYWorD:if expr KEYWorD:t
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWorD:end|if-expr-b|if-expr-c)  
if-expr-b   : KEYWorD:elif expr KEYWorD:t
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWorD:end|if-expr-b|if-expr-c)  
if-expr-c   : KEYWorD:else
              statement
            | (NEWLINE statements KEYWorD:end)   


for-expr    : KEYWorD:for IDENTIFIER EQ expr KEYWorD:to expr
              (KEYWorD:step expr)? KEYWorD:t
              statement
            | (NEWLINE statements KEYWorD:end) 


while-expr  : KEYWorD:while expr KEYWorD:t
              statement
            | (NEWLINE statements KEYWorD:end) 
func-def    : KEYWorD:f IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
            | (NEWLINE statements KEYWorD:end) 